#!/bin/bash

set -eo pipefail

FILEPATH=$(realpath "${0}")
DIR=$(dirname "${FILEPATH}")
MROVER_BUILD_ROOT="${HOME}/.mrover"
JARVIS_ROOT=${DIR}/jarvis_files
JARVIS_VENV=${MROVER_BUILD_ROOT}/jarvis_env
PRODUCT_ENV=${MROVER_BUILD_ROOT}/build_env

run_jarvis() {
    # Runs a Jarvis command using PyInvoke
    # shellcheck source=/dev/null
    source "${JARVIS_VENV}/bin/activate"
    jarvis "--root=${DIR}" "$@"
    return $?
}

make_jarvis_env() {
    # Make virtualenv for Jarvis
    python3 -m venv "${JARVIS_VENV}"
    # shellcheck source=/dev/null
    source "${JARVIS_VENV}/bin/activate"
	pip install --upgrade pip >/dev/null
    pip install -r "${JARVIS_ROOT}/requirements.txt" >/dev/null
    pip install "${JARVIS_ROOT}/jarvis_cmd" >/dev/null
}

if [ ! -d "${MROVER_BUILD_ROOT}" ]; then
    echo -n "Bootstrapping..."
    # Make MRover Build Root
    mkdir -p "${MROVER_BUILD_ROOT}"
    make_jarvis_env
    echo "Done!"
fi

if [ "$#" -lt 1 ]; then
    run_jarvis --help
    exit 0
fi

if [ "$1" = "implode" ]; then
    # Delete mrover build space
    rm -rf "${MROVER_BUILD_ROOT}"
    exit 0
fi

if [ "$1" = "upgrade" ]; then
    # Delete Jarvis env and rebuild it
    # shellcheck source=/dev/null
    source "${JARVIS_VENV}/bin/activate"
    pip install -r "${JARVIS_ROOT}/requirements.txt" >/dev/null
    pip install --upgrade "${JARVIS_ROOT}/jarvis_cmd" >/dev/null
    exit 0
fi

if [ "$1" = "exec" ]; then
    if [ -d "${PRODUCT_ENV}" ]; then
        # shellcheck source=/dev/null
        source "${PRODUCT_ENV}/bin/activate"
        export MROVER_CONFIG="${PRODUCT_ENV}/config"
        shift

        gdb=false
        if [[ $@ == *"-gdb"* ]]; then
            gdb=true
        fi

        # Convert project file path to executable name
        remove_trail=${1%/}
        arg_no_slash=${remove_trail/"/"/"_"} # substitute / for _
        clean_args=${@/$1/$arg_no_slash}
        clean_args=${clean_args/"-gdb"/""} # remove -gdb if necessary

        if [ $gdb = true ]; then
            export LD_LIBRARY_PATH="${PRODUCT_ENV}/lib:${PRODUCT_ENV}/lib/x86_64-linux-gnu"
            gdb $clean_args
        else
            exec env LD_LIBRARY_PATH="${PRODUCT_ENV}/lib:${PRODUCT_ENV}/lib/x86_64-linux-gnu"\
            $clean_args
        fi
    else
        echo "You must build something in order to be able to exec a command."
    fi
    exit 0
fi

run_jarvis "$@"

